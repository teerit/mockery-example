// Code generated by mockery v2.38.0. DO NOT EDIT.

package example_project

import mock "github.com/stretchr/testify/mock"

// MockMyInterface is an autogenerated mock type for the MyInterface type
type MockMyInterface struct {
	mock.Mock
}

// MyMethod provides a mock function with given fields: a, b
func (_m *MockMyInterface) MyMethod(a int, b string) (int, error) {
	ret := _m.Called(a, b)

	if len(ret) == 0 {
		panic("no return value specified for MyMethod")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (int, error)); ok {
		return rf(a, b)
	}
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(a, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MySecondMethod provides a mock function with given fields: a
func (_m *MockMyInterface) MySecondMethod(a int) int {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for MySecondMethod")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewMockMyInterface creates a new instance of MockMyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMyInterface {
	mock := &MockMyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
